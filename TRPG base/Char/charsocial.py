#!/usr/bin/env python

""" charsocial.py
    
    Character class used to represent a sapient entity
    Author: Jeremy Stintzcum
    Date Modified: 03/17/18
"""
from uuid import uuid4
from random import random as rand
import otherchar, disguise, attraction, tags

#TODO: Fix it so default disguise works instead of none
#TODO: Fix disguises
#TODO: add way to talk about a third person, verbal and written
#TODO: Body parts: Generated by race, gender
#TODO: Mood system
#TODO: Move settings to configpaser system
#TODO: Make clothing do stuff

#Settings
#Observance levels
OB_LOW = 0.2
OB_MED = 0.4
OB_HI = 0.7
OB_PERF = 0.9

#Macros
#Type of interactions
TO_SEE = 1
TO_TALK = 2
TO_TOUCH = 3

class CharSocial:
    """ Character class used for interacting with things
        
        
    """
    #Mood list is available to all instances
    moods = ["Happy","Sad","Angry","Depressed"]
    def __init__(self):
        self.known = [] #Known characters list (list of OtherChars)
        self.aTags = Tags.tags()
        self.pTags = Tags.tags()
        self.ActiveDisguise = createDisguise("default", self.aTags, self.pTags)
        self.disguiseList = []
        self.apparentAffiliation = None
        self.affiliations = []
                    
#===================================Disguise====================================  
    def createDisguise(self, name, aTags, pTags):
        """ Create a new disguise. Default is base character
            
            name: String to attach to the disguise
        """
        #Quits if disguise already exists (can't be two different Batmans)
        for i in range(self.disguiseList):
            if name is self.disguiseList[i].name:
                break
        #append to list of disguises
        self.disguiseList.append(disguise(name))  
    
    def setDisguise(self, name):
        """ Sets the active disguise
        
            name: Name of the disguise to set. if None, remove disguise
        """
        for i in range(self.disguiseList):
            if name is self.disguiseList[i].name:
                self.activeDisguise = self.disguiseList[i]
        
#=================================interaction===================================
    def updateOtherChar(self, newID, name, aff, newATags=None, 
        newPTags=None):
        """ Adds a known entity to the list
        
            newID: ID of other char, to avoid duplicates
            name: Name of new Otherchar
            aff: Apparent affiliation
            newATags: appearance tags to add. tuple (tag, tagval)
            newPTags: Personality tags to add. tuple (tag, tagval)
        """
        #Quit if already a made character
        for i in range(self.known):
            if newID is self.known[i].ID:
                break #FIXME: update preexisting characters
        #Instantiate
        newOtherClass = OtherClass(newID, name)
        #add affiliation
        if aff is not None:
            otherClass.addAffiliation(aff)
        #add appearnce tags
        for i in newATags:
            newOtherClass.aTags[newATags[i][0]] = newATags[i][1]
        #add personality tags
        for i in newPTags:
            newOtherClass.pTags[newPTags[i][0]] = newPTags[i][1]
        self.known.append(newOtherClass)
        
    def isObserved(self, charTwo, length, typeof, touchPoints=[]):
        """ Determines what is learned from another character during an 
            interaction. Each CharSocial is calling this independantly
            For instance, Char 1 can be completely unaware Char 2 is watching 
            them from the shadows.
        
            charTwo: Other CharSocial.
            length: Time of interaction
            typeof: the type of interaction
        """
        TrueID = False
        aTags = None
        pTags = None
        obs = charTwo.observance
        amount = obs * length #FIXME: Make more realistic
        #Switch disguise data if disguised
        if self.activeDisguise is None:
            ID = self.ID
            name = self.name
            #Tags gained from seeing someone
            if typeof is TO_SEE:
                aff = self.apparentAffiliation
                aTags = self.aTags
                tags = aTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        aTags.pop(tag)
            #Tags gained for talking to someone
            if typeof is TO_TALK:
                aff = self.apparentAffiliation
                aTags = self.aTags
                tags = aTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        aTags.pop(tag)
                pTags = self.pTags
                tags = pTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        pTags.pop(tag)
            #tags gained from touching someone
            if typeof is TO_TOUCH:
                aff = None
                aTags = self.aTags
                tags = aTags.keys() 
                for i in tags:
                    if j in touchPoints:
                        if j not in bodyParts:
                            aTags.pop(i)
                    elif ">visual<" in i:
                        aTags.pop(i)
        else:
            ID = self.activeDisguise.ID
            name = self.activeDisguise.name
            #Tags gained from seeing someone
            if typeof is TO_SEE 
                aff = self.activeDisguise.apparentAffiliation
                aTags = self.activeDisguise.aTags
                tags = aTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        aTags.pop(tag)
            #Tags gained for talking to someone
            if typeof is TO_TALK:
                aff = self.activeDisguise.apparentAffiliation
                aTags = self.activeDisguise.aTags
                tags = aTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        aTags.pop(tag)
                pTags = self.activeDisguise.pTags
                tags = pTags.keys() 
                for tag in tags:
                    if ">hidden<" in tag:
                        pTags.pop(tag)
            #tags gained from touching someone
            if typeof is TO_TOUCH:
                aff = None
                aTags = self.activeDisguise.aTags
                tags = aTags.keys() 
                for i in tags:
                    if j in touchPoints:
                        if j not in bodyParts:
                            aTags.pop(i)
                    elif ">visual<" in i:
                        aTags.pop(i)
                        
        #How much additional infor is lost due to lack of percetion
        if amount > OB_PERF:
            continue
        elif amount > OB_HI:
            if rand() > OB_HI:
                aff = None
            tags = aTags.keys() 
                for tag in tags:
                    if rand() > OB_HI:
                        aTags.pop(tag)
            tags = pTags.keys() 
                for tag in tags:
                    if rand() > OB_HI:
                        pTags.pop(tag)
        elif amount > OB_MED:
            if rand() > OB_MED:
                aff = None
            tags = aTags.keys() 
                for tag in tags:
                    if rand() > OB_MED:
                        aTags.pop(tag)
            tags = pTags.keys() 
                for tag in tags:
                    if rand() > OB_MED:
                        pTags.pop(tag)
        elif amount > OB_LOW:
            if rand() > OB_LOW:
                aff = None
            tags = aTags.keys() 
                for tag in tags:
                    if rand() > OB_LOW:
                        aTags.pop(tag)
            tags = pTags.keys() 
                for tag in tags:
                    if rand() > OB_LOW:
                        pTags.pop(tag)
        else: #Almost nothing, name and ID
            aff = None
            atags = None
            ptags = None
            
        #tell charTwo to update
        charTwo.updateOtherChar(ID, name, aff, aTags, pTags)
